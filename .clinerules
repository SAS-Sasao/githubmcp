# Cline アプリケーション開発ルール

## ドメイン駆動設計 (DDD) の原則

### 値オブジェクトとエンティティの区別
- **値オブジェクト**：同一性がなく、属性値のみで識別される不変のオブジェクト
  - 例：住所、金額、日付範囲など
  - 常にイミュータブル（不変）に設計し、副作用を持たない
  - 等価性は属性値の比較で判断

- **エンティティ**：一意の識別子を持ち、ライフサイクルを通じて同一性が保たれるオブジェクト
  - 例：ユーザー、注文、商品など
  - 識別子（ID）によって同一性を判断
  - 状態が変化しても同じエンティティとして扱われる

### 集約による整合性の保証
- 関連するエンティティと値オブジェクトをグループ化し、一貫性を保つ
- 集約ルート（Aggregate Root）を通じてのみ集約内のオブジェクトにアクセス
- トランザクション境界として機能し、不変条件を維持
- 集約間の参照は識別子を使用し、直接参照を避ける

### リポジトリによるデータアクセスの抽象化
- 永続化の詳細を隠蔽し、ドメインモデルに集中できるようにする
- 集約単位でデータの取得・保存を行う
- インターフェースを定義し、実装の詳細から分離
- クエリオブジェクトを使用して複雑な検索条件を表現

### 境界付けられたコンテキストの意識
- 大きなドメインを明確な境界を持つ小さなコンテキストに分割
- 各コンテキスト内で一貫した用語と概念を使用
- コンテキスト間の関係を明示的にマッピング（コンテキストマップ）
- 共有カーネル、顧客/サプライヤー、公開言語などのパターンを適用

## 技術スタックの選定

### 選定プロセス
- アプリケーション開発開始時に、要件に最適な技術スタックを提案
- 選定理由を明確に説明し、ユーザーの理解と合意を得る
- 以下の観点から技術を評価：
  - プロジェクトの要件との適合性
  - チームの専門知識と学習曲線
  - コミュニティのサポートと活発さ
  - 長期的なメンテナンス性と拡張性
  - パフォーマンスと効率性

### 技術スタック変更の管理
- 一度決定した技術スタックの変更を検討する場合：
  - 変更の必要性と利点を明確に文書化
  - 移行コストと潜在的なリスクを評価
  - **必ずユーザーに確認を行い、承認を得てから変更を実施**
  - 段階的な移行計画を立案し、影響を最小限に抑える

## コード修正のプロセス

### 既存コードの修正手順
1. **影響範囲の調査**
   - 修正対象のコードと依存関係を特定
   - 変更による潜在的な副作用を分析
   - テスト範囲を決定

2. **調査結果の報告**
   - 修正内容と影響範囲をユーザーに説明
   - リスクと対策を提示
   - 代替アプローチがある場合は選択肢を提示

3. **承認と実装**
   - **ユーザーから明示的な許可を得た場合のみ修正を実行**
   - 承認された変更計画に厳密に従う
   - 変更履歴を適切に記録

## コーディング規約

### 一般原則
- DRY (Don't Repeat Yourself) の原則を遵守
- SOLID 原則に従ったコード設計
- 命名規則の一貫性を保つ
- コメントは「なぜ」に焦点を当て、コード自体が「何を」「どのように」を表現

### 言語・フレームワーク固有のガイドライン
- 各言語やフレームワークの公式スタイルガイドに準拠
- プロジェクト固有の規約がある場合はそれを優先
- 静的解析ツールを活用してコード品質を維持

## テスト戦略

### テスト階層
- ユニットテスト：個々の関数やクラスの動作を検証
- 統合テスト：コンポーネント間の相互作用を検証
- E2Eテスト：ユーザーの視点からシステム全体の動作を検証

### テスト駆動開発 (TDD)
- 可能な限り、テストファーストのアプローチを採用
- レッド（失敗するテストを書く）→グリーン（テストを通す）→リファクタリングのサイクルを実践

## パフォーマンスとセキュリティ

### パフォーマンス最適化
- 早期最適化を避け、測定に基づいた最適化を行う
- ボトルネックを特定してから対策を講じる
- キャッシュ戦略を適切に設計・実装

### セキュリティ対策
- OWASP Top 10 などの一般的な脆弱性に対する対策を実装
- 認証・認可の適切な実装
- 入力検証とサニタイズの徹底
- 機密データの適切な保護

## ドキュメンテーション

### コードドキュメント
- 公開APIとパブリックインターフェースには適切なドキュメントを提供
- 複雑なロジックには説明コメントを追加
- アーキテクチャの決定理由を記録

### プロジェクトドキュメント
- システム構成図の維持
- セットアップと実行手順の文書化
- トラブルシューティングガイドの提供

## 継続的改善

### 技術的負債の管理
- 技術的負債を特定し、可視化
- 計画的な返済戦略を立案
- 新機能開発とのバランスを取る

### コードレビュー
- すべての変更に対してコードレビューを実施
- 建設的なフィードバックを提供
- 知識共有の機会として活用

## コミュニケーション

### 進捗報告
- 定期的な進捗状況の報告
- 障害や課題の早期共有
- 明確で簡潔なコミュニケーション

### 意思決定の透明性
- 技術的決定の理由を文書化
- 代替案と選択した理由を説明
- ステークホルダーとの合意形成
